import random
import string

class URLShortener:
    def __init__(self):
        self.url_mapping = {}
        self.short_url_prefix = "http://short.url/"
        self.short_url_length = 6
    #Setting parameters and implementing for loop
    def generate_short_url(self):
        characters = string.ascii_letters + string.digits
        return ''.join(random.choice(characters) for _ in range(self.short_url_length))

    def shorten_url(self, original_url):
        if original_url in self.url_mapping.values():
            # If the URL is already shortened, return the existing short URL, prevents an error with an already shortened URL from being shortened.
            return next(short_url for short_url, url in self.url_mapping.items() if url == original_url)
        else:
            # Generate a new short URL
            short_url = self.short_url_prefix + self.generate_short_url()

            # Check if the generated short URL is already in use; if yes, try again
            while short_url in self.url_mapping:
                short_url = self.short_url_prefix + self.generate_short_url()

            self.url_mapping[short_url] = original_url
            return short_url

    def get_original_url(self, short_url):
        return self.url_mapping.get(short_url, None)


# Example usage:
if __name__ == "__main__":
    shortener = URLShortener()

    # Shorten a URL
    original_url = "https://builder.hostinger.com/d95DpDxxraTPxoJX"
    short_url = shortener.shorten_url(original_url)
    print("Original URL:", original_url)
    print("Short URL:", short_url)

    # Get the original URL from the short URL
    retrieved_url = shortener.get_original_url(short_url)
    print("Retrieved URL:", retrieved_url)

#Generated Results of the shortened URL
Original URL: https://builder.hostinger.com/d95DpDxxraTPxoJX
Short URL: http://short.url/zevfh8
